<?php

/**
 * Class to build html framework and plumbing around
 * page content.
 */
include_once BASEPATH . COREPHP . 'helpers/ParseAndReplace.class.php';

class Template {

    /**
     * @access private
     * @var string $template file to put all the rest of the page elements in.
     */
    private $template = '';
    /**
     * @access private
     * @var string $header Name of header object to be populated.
     */
    private $header = '';
    /**
     * @access private
     * @var string $footer  Name of footer object to be populated
     */
    private $footer = '';
    /**
     * @access private
     * @var string $nav Name of Nav object to be populated
     */
    private $nav = '';
    /**
     * @access private
     * @var string $content Name of content file to load
     */
    private $content = '';
    /**
     * @access private
     * @var string $loaded Holder for template to be parsed later.
     */
    private $loaded = '';
    /**
     * @access private
     * @var string $processed Results of parsed template with all parts included
     */
    private $processed = '';
    /**
     * @access private
     * @var BOOL $hasErrors did the parsing of the pieces error at any point?
     */
    private $didError = '';
    /**
     *  @var object  Will be the parseandreplace object.
     *  @access private
     */
    private $pnr = '';
    /**
     * Will hold all the values that need to be inserted into the template
     * @access private
     * @var type array
     */
    private $matches = array();

    /**
     * instantiate the Template object.  Can overload and override
     * the default values.
     *
     * @param string $header
     * @param string $nav
     * @param string $footer
     * @param string $pageTitle
     * @param string $pageSubTitle
     */
    public function __construct($template = '', $header = '', $nav = '', $footer = '', $content = '') {
        $this->setTemplate($template);
        $this->setHeader($header);
        $this->setNav($nav);
        $this->setFooter($footer);
        $this->setContent($content);
        $this->setMatches();
        $this->didError = FALSE;
        //$this->processed = new ParseAndReplace($this->getTemplate(),$this->getMatches());
        $this->loadTemplate();
    }

    /**
     * @access public
     * @return bool returns true if parsing contained errors otherwise returns false .
     */
    public function hasErrors() {
        return $this->didError;
    }

    /* Time to roll the Getters and Setters! */

    /**
     * @access private
     * @param string $template passes in the name of the template file to use
     */
    private function setTemplate($template) {
        if ($template == '') {
            $this->template = BASEPATH .TEMPLATEPATH . 'layoutTemplateDefault.php';
        } else {
            $this->template = BASEPATH .TEMPLATEPATH . 'layoutTemplate' . $template . '.php';
        }
    }

    /**
     * @access public
     * @return string returns the name of the template file to use.
     */
    public function getTemplate() {
        return $this->template;
    }

    /**
     * @access private
     * @param string $header Sets the name of the header to use.
     */
    private function setHeader($header) {
        $this->header = BASEPATH.TEMPLATEPATH.'header_' . $header . '.php';
    }

    /**
     * @access public
     * @return string returns the name of the header configuration to use
     */
    public function getHeader() {
        return $this->header;
    }

    /**
     * @access private
     * @param string $footer Sets the name of the header to use.
     */
    private function setFooter($footer) {
<<<<<<< .mine
        $this->footer = BASEPATH.TEMPLATEPATH.'footer_'.$footer.'.php';
=======
        $this->footer = BASEPATH.TEMPLATEPATH.'footer_' . $footer . '.php';
>>>>>>> .r20818
    }

    /**
     * @access public
     * @return string returns the name of the footer configuration to use
     */
    public function getFooter() {
        return $this->footer;
    }

    /**
     * @access private
     * @param string $nav Sets the name of the header to use.
     */
    private function setNav($nav) {
        $this->nav = $nav;
    }

    /**
     * @access public
     * @return string returns the name of the nav configuration to use
     */
    public function getNav() {
        return $this->nav;
    }

    /**
     * @access private
     * @param string $content sets the path to the content file
     */
    private function setContent($content) {
        $this->content = BASEPATH . '/content/' . $content . '.php';
    }

    /**
     * @access public
     * @return type string
     */
    public function getContent() {
        return $this->content;
    }

    /**
     * Populate array with template values that the parse and replace
     * class can read into the template
     *
     * @access private
     */
    private function setMatches() {
        $this->matches["header"] = $this->getHeader();
        $this->matches["nav"] = $this->getNav();
        $this->matches["content"] = $this->getContent();
        $this->matches["footer"] = $this->getFooter();
    }

    /**
     * Returns the Matches array
     * @return type array
     */
    private function getMatches() {
        return $this->matches;
    }

    /**
     * Retrieve template file for use on webpage
     *
     * @access private
     */
    private function loadTemplate() {
        $this->pnr = new ParseAndReplace($this->getTemplate(), $this->getMatches());
        $this->processed = $this->pnr->getUpdated();
    }

    /**
     * @access public
     * @return type string
     */
    public function getHTML() {
        return $this->processed;
    }

    /**
     * Create Header for Webpage.
     *
     * @access private
     * @param string $headerName name of header to include.
     * @return string deliver name of header to include.
     *
     */
    private function createHeader($headerName) {
        
    }

    /**
     *  Create Footer for Webpage
     *
     * @access private
     * @param string $footerName
     * @return string deliver name of footer to include
     */
    private function createFooter($footerName) {
        
    }

    /**
     * Create Nav for Webpage.
     *
     * @access private
     * @param string $navName
     * @return string deliver name of nav file
     */
    private function createNav($navName) {
        
    }

    /**
     *  fetches the content either a file or in the DB to load on the page
     *
     * @access private
     */
    private function fetchContent() {
        
    }

}

?>
